/*
 * WebSocketServer.ino
 *
 *  Created on: 22.05.2015
 *
 */

#include <Arduino.h>

#include <WiFi.h>
#include <WiFiMulti.h>
#include <WiFiClientSecure.h>

#include <WebSocketsServer.h>
#include <ESPmDNS.h>

#include <Protocol.h>
#include <Arm.h>


//create object
Protocol protocol;

Arm arm;

#define DEVICE_ID 0x4d

#define DEBUG_SERIAL Serial

WiFiMulti wifiMulti;
WebSocketsServer webSocket = WebSocketsServer(81);
MDNSResponder mdns;

static const char ssid[] = "Singularity";
static const char password[] = "r78ny8qt";
static const char domain[] = "bio1-leftarm";
/*
void handleServoBin(uint8_t *payload, size_t length){
  
  // Get angle, speed and wait
  int servoCount = 0;
  for(int i=3;i<length;i+=3){
    byte servoAngle = payload[i-2];
    byte servoSpeed = payload[i-1];
    byte servoWait = payload[i];

    // Check to see if angle changed
    if(angles[servoCount]!=servoAngle){
      // Handle scServos
      if(servoCount==8 || servoCount==9){
        int anglePWM = map(servoAngle, 0, 360, scServoMin, scServoMax);

        // Find better way to deal with multiple servos
        if(servoCount==8){
          scServo.WritePos(scServoID1, anglePWM, 0, 5000);
        }
        else if(servoCount==9){
          scServo.WritePos(scServoID2, anglePWM, 0, 5000);
        }
      }
      else{
        int anglePWM = map(servoAngle, 0, 180, SERVOMIN, SERVOMAX);
        servoPWM.setPWM(servoCount, 0, anglePWM);
      }
      
      angles[servoCount] = servoAngle;
      DEBUG_SERIAL.print("Updated: ");
      DEBUG_SERIAL.println(servoCount);
    }

    servoCount++;
  }
}
*/
void webSocketEvent(uint8_t num, WStype_t type, uint8_t * payload, size_t length)
{    
  switch(type) {
    case WStype_DISCONNECTED:
      Serial.printf("Disconnected: %u\n", num);
      break;
    case WStype_CONNECTED:
      {
        IPAddress ip = webSocket.remoteIP(num);
        Serial.printf("New socket client: %d.%d.%d.%d\n", ip[0], ip[1], ip[2], ip[3]);
        webSocket.sendTXT(num, "Connected");
      }
      break;
    case WStype_TEXT:
      Serial.print("RXT:");
      break;
    case WStype_BIN:
        if(length > 0) {
            bool validData = protocol.receiveData(payload, length);

            // Is data valid and there are updated values
            if (validData && protocol.updated) {
                arm.update(protocol.updatedCmd);
            }
        }
      break;
    default:
      Serial.printf("Invalid WStype [%d]\r\n", type);
      break;
  }
}

void setup() {
    pinMode(LED_BUILTIN, OUTPUT);
    // DEBUG_SERIAL.begin(921600);
    DEBUG_SERIAL.begin(115200);

    //Serial.setDebugOutput(true);
    DEBUG_SERIAL.setDebugOutput(false);

    for(uint8_t t = 4; t > 0; t--) {
        DEBUG_SERIAL.printf("[SETUP] BOOT WAIT %d...\n", t);
        DEBUG_SERIAL.flush();
        delay(1000);
    }

    wifiMulti.addAP(ssid, password);

    while(wifiMulti.run() != WL_CONNECTED) {
        delay(100);
    }

    DEBUG_SERIAL.print("WIFI Connected: ");
    DEBUG_SERIAL.println(ssid);
    DEBUG_SERIAL.print("Local IP: ");
    DEBUG_SERIAL.println(WiFi.localIP());

    if (mdns.begin(domain)) {
      DEBUG_SERIAL.println("MDNS started");
      //mdns.addService("http", "tcp", 80);
      mdns.addService("ws", "tcp", 81);
    }
    else {
      DEBUG_SERIAL.println("MDNS failed");
      while(1){
        delay(1000);
      }
    }
    DEBUG_SERIAL.print("URL: http://");
    DEBUG_SERIAL.print(domain);
    DEBUG_SERIAL.println(".local");

    webSocket.begin();
    webSocket.onEvent(webSocketEvent);

    protocol.begin(DEVICE_ID);

    arm.begin();

    protocol.addCommand(details(arm.servoAngleMulti), arm.servoAngleMultiID);
    protocol.addCommand(details(arm.servoAngleSingle), arm.servoAngleSingleID);

    digitalWrite(LED_BUILTIN, HIGH);
}

void loop() {
    webSocket.loop();
}